(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{459:function(s,t,a){"use strict";a.r(t);var n=a(2),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("第二章：基本概念和核心组件")]),s._v(" "),t("p",[s._v("在本章中，我们将深入了解 NestJS 的基本概念和核心组件。这些组件是构建 NestJS 应用程序的基础，了解它们的作用和用法对于后续的开发至关重要。")]),s._v(" "),t("h2",{attrs:{id:"_2-1-控制器-controllers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-控制器-controllers"}},[s._v("#")]),s._v(" 2.1 控制器（Controllers）")]),s._v(" "),t("p",[s._v("控制器在 NestJS 中负责处理传入的 HTTP 请求，并返回响应。它们充当了应用程序的路由处理器。控制器使用装饰器将它们绑定到特定的 URL 路径上，并指定要处理的 HTTP 方法（如 GET、POST、PUT 等）。")]),s._v(" "),t("h3",{attrs:{id:"_2-1-1-创建一个控制器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-创建一个控制器"}},[s._v("#")]),s._v(" 2.1.1 创建一个控制器")]),s._v(" "),t("p",[s._v("让我们来创建一个简单的控制器来处理一个 GET 请求。首先，在 src 目录下创建一个新的文件 cats.controller.ts，并编写以下代码：")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" Controller"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Get "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'@nestjs/common'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n@"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Controller")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'cats'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CatsController")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  @"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findAll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'This action returns all cats'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("在上面的代码中，我们使用了 NestJS 提供的 Controller 装饰器来定义一个控制器类。@Controller('cats') 指定了该控制器绑定的 URL 路径为 /cats。")]),s._v(" "),t("p",[s._v("接着，我们在控制器类中定义了一个处理 GET 请求的方法 findAll。使用了 @Get() 装饰器，表示该方法将处理 HTTP 的 GET 请求，并且对应的 URL 路径为控制器的根路径（即 /cats）。")]),s._v(" "),t("h3",{attrs:{id:"_2-1-2-处理请求和返回响应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-处理请求和返回响应"}},[s._v("#")]),s._v(" 2.1.2 处理请求和返回响应")]),s._v(" "),t("p",[s._v("在控制器中，我们可以编写各种方法来处理不同类型的请求，并根据业务逻辑返回不同的响应。在上面的示例中，我们简单地返回了一个字符串作为响应。")]),s._v(" "),t("p",[s._v('当我们向应用程序发送 GET 请求到 /cats 路径时，该请求将由 CatsController 的 findAll 方法处理，并返回字符串 "This action returns all cats"。')])])}),[],!1,null,null,null);t.default=r.exports}}]);