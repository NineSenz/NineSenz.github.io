(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{590:function(n,r,t){"use strict";t.r(r);var v=t(12),_=Object(v.a)({},(function(){var n=this,r=n.$createElement,t=n._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("1.初始化参数")]),t("br"),n._v("\n从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；")]),n._v(" "),t("li",[t("strong",[n._v("2.开始编译")]),t("br"),n._v("\n用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；")]),n._v(" "),t("li",[t("strong",[n._v("3.确定入口")]),t("br"),n._v("\n根据配置中的 entry 找出所有的入口文件；")]),n._v(" "),t("li",[t("strong",[n._v("4.编译模块")]),t("br"),n._v("\n从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),n._v(" "),t("li",[t("strong",[n._v("5.完成模块编译")]),t("br"),n._v("\n在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),n._v(" "),t("li",[t("strong",[n._v("6.输出资源")]),t("br"),n._v("\n根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")]),n._v(" "),t("li",[t("strong",[n._v("7.输出完成")]),t("br"),n._v("\n在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])]),n._v(" "),t("p",[n._v("在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")])])}),[],!1,null,null,null);r.default=_.exports}}]);