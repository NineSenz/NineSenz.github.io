(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{553:function(s,t,a){"use strict";a.r(t);var n=a(12),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[s._v("#")]),s._v(" JavaScript")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1"}},[s._v("js有哪些数据类型？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#2"}},[s._v("基本数据类型和引用数据类型有什么区别？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#3"}},[s._v("let和const、var的区别")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#4"}},[s._v("判断数据类型的方法有哪些")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#5"}},[s._v("深拷贝和浅拷贝有何区别？如何实现？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#6"}},[s._v("什么是闭包")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#7"}},[s._v("闭包的用途")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#8"}},[s._v("闭包的缺点")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#9"}},[s._v("闭包的使用场景")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#10"}},[s._v("什么是执行上下文和执行栈？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#11"}},[s._v("什么是作用域和作用域链")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#12"}},[s._v("作用域和执行上下文的区别是什么？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#13"}},[s._v("this指向的各种情况都有什么？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#14"}},[s._v("如何改变this指针的指向")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#15"}},[s._v("如何理解同步和异步？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#16"}},[s._v("js是如何实现异步的？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#17"}},[s._v("什么是ajax？如何实现？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#18"}},[s._v("实现异步的方式有哪些？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#19"}},[s._v("怎么理解Promise对象？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#20"}},[s._v("怎么理解宏任务？微任务？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#21"}},[s._v("实现继承的方法有哪些？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#22"}},[s._v("require/import之间的区别？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#23"}},[s._v("原型和原型链")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#24"}},[s._v("什么是事件委托？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#25"}},[s._v("解释一下变量提升")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#26"}},[s._v("如何理解高阶函数？")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#27"}},[s._v("如何区分声明函数和表达式函数")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#28"}},[s._v("解释原型继承是如何工作的")])])]),s._v(" "),a("h2",{attrs:{id:"javascript有哪些数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript有哪些数据类型"}},[s._v("#")]),s._v(" javascript有哪些数据类型？")]),s._v(" "),a("div",{attrs:{id:"1"}}),s._v(" "),a("p",[s._v("根据Javascript中的变量类型传递方式，分为基本数据类型和引用数据类型两大类七大种。\n基本数据类型包括:")]),s._v(" "),a("ul",[a("li",[s._v("undefined")]),s._v(" "),a("li",[s._v("null")]),s._v(" "),a("li",[s._v("boolean")]),s._v(" "),a("li",[s._v("number")]),s._v(" "),a("li",[s._v("string")]),s._v(" "),a("li",[s._v("symbol")])]),s._v(" "),a("p",[a("strong",[s._v("注意:const、let、var不是数据类型，是用于声明变量的关键字")])]),s._v(" "),a("p",[s._v("引用数据类型只有Object一种，主要包括对象、数组和函数。\n判断数据类型采用"),a("code",[s._v("typeof")]),s._v("操作符, 有两种语法：")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 语法一")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 语法二")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FG")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回object")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回true, 因为undefined派生自null")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"基本数据类型和引用数据类型有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型和引用数据类型有什么区别"}},[s._v("#")]),s._v(" 基本数据类型和引用数据类型有什么区别？")]),s._v(" "),a("div",{attrs:{id:"2"}}),s._v(" "),a("p",[s._v("两者作为函数的参数进行传递时：")]),s._v(" "),a("ul",[a("li",[s._v("基本数据类型传入的是数据的副本，原数据的更改不会影响传入后的数据。")]),s._v(" "),a("li",[s._v("引用数据类型传入的是数据的引用地址，原数据的更改会影响传入后的数据。")])]),s._v(" "),a("p",[s._v("两者在内存中的存储位置：")]),s._v(" "),a("ul",[a("li",[s._v("基本数据类型存储在栈中。")]),s._v(" "),a("li",[s._v("引用数据类型在栈中存储了指针，该指针指向的数据实体存储在堆中。")])]),s._v(" "),a("h2",{attrs:{id:"let和const、var的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let和const、var的区别"}},[s._v("#")]),s._v(" let和const、var的区别")]),s._v(" "),a("div",{attrs:{id:"3"}}),s._v(" "),a("p",[s._v("let与const都是只在声明所在的块级作用域内有效。"),a("br"),s._v("\nlet声明的变量可以改变，值和类型都可以改变，没有限制。"),a("br"),s._v("\nconst 声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋\n值。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//报错,一旦声明变量，应该立即赋值！！")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//报错，因为定义常量之后不能成重新赋值！！")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("对于复合类型的变量，如数组和对象，变量名不指向数据，而是指向数据所在的地址。 const 命令只是\n保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心。")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" names "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nnames "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//出错，因为变量names指向的地址不能发生改变，应始终指向[]所在的地址！！！")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("与"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("不是同一个地址\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//不会报错，因为names指向的地址不变，改变的只是内部数据const names = [];")]),s._v("\nnames"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nnames"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\nnames"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("如果想让定义的对象或数组的内部数据也不能够修改和改变，可以使用object.freeze(names)进行冻\n结，这样为对象添加新属性就不起作用。\n除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("constantize")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("obj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("freeze")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("keys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'object'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("constantize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"判断数据类型的方法有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数据类型的方法有哪些"}},[s._v("#")]),s._v(" 判断数据类型的方法有哪些")]),s._v(" "),a("div",{attrs:{id:"4"}}),s._v(" "),a("ol",[a("li",[a("p",[s._v("利用typeof可以判断数据的类型")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("A instanceof B")]),s._v(" 可以用来判断A是否为B的实例，但它不能检测 null 和 undefined；")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("B.constructor == A")]),s._v(" 可以判断A是否为B的原型，但constructor检测 Object与instanceof不一\n样，还可以处理基本数据类型的检测。")])])]),s._v(" "),a("p",[a("strong",[s._v("不过函数的 constructor 是不稳定的，这个主要体现在把类的原型进行重写，在重写的过程中很有可能出现把之前的constructor给覆盖了，这样检测出来的结果就是不准确的。")])]),s._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("code",[s._v("Object.prototype.toString.call()")])])]),s._v(" "),a("h2",{attrs:{id:"深拷贝和浅拷贝有何区别-如何实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝和浅拷贝有何区别-如何实现"}},[s._v("#")]),s._v(" 深拷贝和浅拷贝有何区别？如何实现？")]),s._v(" "),a("div",{attrs:{id:"5"}}),s._v(" "),a("p",[s._v("浅拷贝只复制指向某个对象的指针，而不复制对象本身。浅拷贝的实现方式有：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Object.assign()")]),s._v("：需注意的是目标对象只有一层的时候，是深拷贝；")]),s._v(" "),a("li",[s._v("扩展运算符；")])]),s._v(" "),a("p",[s._v("深拷贝就是在拷贝数据的时候，将数据的所有引用结构都拷贝一份。深拷贝的实现方式有：")]),s._v(" "),a("ul",[a("li",[s._v("手写遍历递归赋值；")]),s._v(" "),a("li",[s._v("结合使用"),a("code",[s._v("JSON.parse()")]),s._v("和"),a("code",[s._v("JSON.stringify()")]),s._v("方法。")])]),s._v(" "),a("h2",{attrs:{id:"什么是闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包"}},[s._v("#")]),s._v(" 什么是闭包")]),s._v(" "),a("div",{attrs:{id:"6"}}),s._v(" "),a("blockquote",[a("p",[s._v("能够读取其他函数内部变量的函数。或简单理解为定义在一个函数内部的函数，内部函数持有外部函数内变量的引用。")])]),s._v(" "),a("h2",{attrs:{id:"闭包的用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包的用途"}},[s._v("#")]),s._v(" 闭包的用途")]),s._v(" "),a("div",{attrs:{id:"7"}}),s._v(" "),a("ol",[a("li",[s._v("读取函数内部的变量")]),s._v(" "),a("li",[s._v("让这些变量的值始终保持在内存中。不会再f1调用后被自动清除。")]),s._v(" "),a("li",[s._v("方便调用上下文的局部变量。利于代码封装。")])]),s._v(" "),a("p",[s._v("原因：f1是f2的父函数，f2被赋给了一个全局变量，f2始终存在内存中，f2的存在依赖f1，因此f1也始终\n存在内存中，不会在调用结束后，被垃圾回收机制回收。")]),s._v(" "),a("h2",{attrs:{id:"闭包的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包的缺点"}},[s._v("#")]),s._v(" 闭包的缺点")]),s._v(" "),a("div",{attrs:{id:"8"}}),s._v(" "),a("ol",[a("li",[s._v("由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网\n页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删\n除。")]),s._v(" "),a("li",[s._v("闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，\n把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时\n一定要小心，不要随便改变父函数内部变量的值。")])]),s._v(" "),a("h2",{attrs:{id:"闭包的使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包的使用场景"}},[s._v("#")]),s._v(" 闭包的使用场景")]),s._v(" "),a("div",{attrs:{id:"9"}}),s._v(" "),a("ol",[a("li",[s._v("函数防抖")]),s._v(" "),a("li",[s._v("使用闭包设计单例模式")]),s._v(" "),a("li",[s._v("为多个组件独立属性")]),s._v(" "),a("li",[s._v("设置私有变量")]),s._v(" "),a("li",[s._v("拿到正确的值")])]),s._v(" "),a("p",[s._v("详情可参考: "),a("a",{attrs:{href:"https://juejin.cn/post/6844903619595075592",target:"_blank",rel:"noopener noreferrer"}},[s._v("闭包实际场景应用"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"什么是执行上下文和执行栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是执行上下文和执行栈"}},[s._v("#")]),s._v(" 什么是执行上下文和执行栈？")]),s._v(" "),a("div",{attrs:{id:"10"}}),s._v(" "),a("p",[s._v("变量或函数的执行上下文，决定了它们的行为以及可以访问哪些数据。")]),s._v(" "),a("p",[s._v("每个上下文都有一个关联的变量对象，\n而这个上下文中定义的所有变量和函数都存在于这个对象上(如DOM中全局上下文关联的便是window对象)。")]),s._v(" "),a("p",[s._v("每个函数调用都有自己的上下文。当代码执行流进入函数时，函数的上下文被推到一个执行栈中。")]),s._v(" "),a("p",[s._v("在函数执行完之后，执行栈会弹出该函数上下文，在其上的所有变量和函数都会被销毁，并将控制权返还给之前的执行上\n下文。 JS的执行流就是通过这个执行栈进行控制的。")]),s._v(" "),a("h2",{attrs:{id:"什么是作用域和作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是作用域和作用域链"}},[s._v("#")]),s._v(" 什么是作用域和作用域链")]),s._v(" "),a("div",{attrs:{id:"11"}}),s._v(" "),a("p",[s._v("作用域可以理解为一个独立的地盘，可以理解为标识符所能生效的范围。作用域最大的用处就是隔离变\n量，不同作用域下同名变量不会有冲突。ES6中有全局作用域、函数作用域和块级作用域三层概念。")]),s._v(" "),a("p",[s._v("当一个变量在当前块级作用域中未被定义时，会向父级作用域(创建该函数的那个父级作用域)寻找。\n如果父级仍未找到，就会再一层一层向上寻找，直到找到全局作用域为止。这种一层一层的关系，就是\n作用域链 。")]),s._v(" "),a("h2",{attrs:{id:"作用域和执行上下文的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域和执行上下文的区别是什么"}},[s._v("#")]),s._v(" 作用域和执行上下文的区别是什么？")]),s._v(" "),a("div",{attrs:{id:"12"}}),s._v("\n1. 函数的执行上下文只在函数被调用时生成，而其作用域在创建时已经生成；\n2. 函数的作用域会包含若干个执行上下文(有可能是零个，当函数未被调用时)。\n"),a("h2",{attrs:{id:"this指向的各种情况都有什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this指向的各种情况都有什么"}},[s._v("#")]),s._v(" this指向的各种情况都有什么？")]),s._v(" "),a("div",{attrs:{id:"13"}}),s._v(" "),a("p",[s._v("this的指向只有在调用时才能被确定，因为this是执行上下文的一部分。")]),s._v(" "),a("ol",[a("li",[s._v("全局作用域中的函数：其内部this指向window：")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//输出1")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("对象内部的函数：其内部this指向对象本身：")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//输出2")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("构造函数：其内部this指向生成的实例：")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//this.name指向P")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//this.age指向P")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("createP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"老李"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("由apply、call、bind改造的函数：其this指向第一个参数：")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" d\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//输出15")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[s._v("箭头函数：箭头函数没有自己的this，看其外层的是否有函数，如果有，外层函数的this就是内部\n箭头函数的this，如果没有，则this是window。")])]),s._v(" "),a("h2",{attrs:{id:"如何改变this指针的指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何改变this指针的指向"}},[s._v("#")]),s._v(" 如何改变this指针的指向?")]),s._v(" "),a("div",{attrs:{id:"14"}}),s._v(" "),a("p",[s._v("可以使用apply、call、bind方法改变this指向(并不会改变函数的作用域)。比较如下：")]),s._v(" "),a("ol",[a("li",[s._v("三者第一个参数都是this要指向的对象，也就是想指定的上下文，上下文就是指调用函数的那个对象(没有就指向全局window)；")]),s._v(" "),a("li",[s._v("apply和bind的第二个参数都是数组，call接收多个参数并用逗号隔开；")]),s._v(" "),a("li",[s._v("apply和call只对原函数做改动，bind会返回新的函数(要生效还得再调用一次)。")])]),s._v(" "),a("h2",{attrs:{id:"如何理解同步和异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解同步和异步"}},[s._v("#")]),s._v(" 如何理解同步和异步？")]),s._v(" "),a("div",{attrs:{id:"15"}}),s._v(" "),a("ul",[a("li",[s._v("同步：按照代码书写顺序一一执行处理指令的一种模式，上一段代码执行完才能执行下一段代码。")]),s._v(" "),a("li",[s._v("异步：可以理解为一种并行处理的方式，不必等待一个程序执行完，可以执行其它的任务。")])]),s._v(" "),a("p",[a("strong",[s._v("JS之所以需要异步的原因在于JS是单线程运行的。常用的异步场景有：定时器、ajax请求、事件绑定。")])]),s._v(" "),a("h2",{attrs:{id:"js是如何实现异步的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js是如何实现异步的"}},[s._v("#")]),s._v(" js是如何实现异步的？")]),s._v(" "),a("div",{attrs:{id:"16"}}),s._v(" "),a("blockquote",[a("p",[s._v("JS引擎是单线程的，但又能实现异步的原因在于事件循环和任务队列体系。")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("事件循环："),a("br"),s._v("\nJS 会创建一个类似于 "),a("code",[s._v("while (true)")]),s._v(" 的循环，每执行一次循环体的过程称之为 "),a("code",[s._v("Tick")]),s._v("。每次 Tick 的过程就是查看是否有待处理事件，如果有则取出相关事件及回调函数放入执行栈中由主线程执行。待处理的事件会存储在一个任务队列中，也就是每次 Tick 会查看任务队列中是否有需要执行的任务。")])]),s._v(" "),a("li",[a("p",[s._v("任务队列："),a("br"),s._v("\n异步操作会将相关回调添加到任务队列中。而不同的异步操作添加到任务队列的时机也不同，如\n"),a("code",[s._v("onclick")]),s._v(", "),a("code",[s._v("setTimeout")]),s._v(", "),a("code",[s._v("ajax")]),s._v(" 处理的方式都不同，这些异步操作是由浏览器内核的 "),a("code",[s._v("webcore")]),s._v(" 来执行的，浏览器内核包含3种 "),a("code",[s._v("webAPI")]),s._v("，分别是 "),a("code",[s._v("DOM Binding")]),s._v(" "),a("code",[s._v("network")]),s._v(" "),a("code",[s._v("timer")]),s._v("模块。"),a("code",[s._v("onclick")]),s._v(" 由 DOM Binding 模块来处理，当事件触发的时候，回调函数会立即添加到任务队列中。\n"),a("code",[s._v("setTimeout")]),s._v(" 由 "),a("code",[s._v("timer")]),s._v(" 模块来进行延时处理，当时间到达的时候，才会将回调函数添加到任务队列中。\najax 由"),a("code",[s._v("network模块")]),s._v("来处理，在网络请求完成返回之后，才将回调添加到任务队列中。")])]),s._v(" "),a("li",[a("p",[s._v("主线程："),a("br"),s._v("\nJS 只有一个线程，称之为主线程。而事件循环是主线程中执行栈里的代码执行完毕之后，才开始执行的。所以，主线程中要执行的代码时间过长，会阻塞事件循环的执行，也就会阻塞异步操作的执行。只有当主线程中执行栈为空的时候（即同步代码执行完后），才会进行事件循环来观察要执行的事件回调，当事件循环检测到任务队列中有事件就取出相关回调放入执行栈中由主线程执行。")])])]),s._v(" "),a("h2",{attrs:{id:"什么是ajax-如何实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是ajax-如何实现"}},[s._v("#")]),s._v(" 什么是ajax？如何实现？")]),s._v(" "),a("div",{attrs:{id:"17"}}),s._v(" "),a("p",[s._v("ajax是一种能够实现局部网页刷新的技术，可以使网页异步刷新。")]),s._v(" "),a("p",[s._v("ajax的实现主要包括四个步骤：")]),s._v(" "),a("p",[s._v("（1）创建核心对象XMLhttpRequest；")]),s._v(" "),a("p",[s._v("（2）利用open方法打开与服务器的连接；")]),s._v(" "),a("p",[s._v('（3）利用send方法发送请求；（"POST"请求时，还需额外设置请求头）')]),s._v(" "),a("p",[s._v("（4）监听服务器响应，接收返回值。")]),s._v(" "),a("h2",{attrs:{id:"实现异步的方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现异步的方式有哪些"}},[s._v("#")]),s._v(" 实现异步的方式有哪些？")]),s._v(" "),a("div",{attrs:{id:"18"}}),s._v(" "),a("p",[s._v("（1）回调函数模式：将需要异步执行的函数作为回调函数执行，其缺点在于处理复杂逻辑异步逻辑时，\n会造成回调地狱(回调嵌套层数太多，代码结构混乱)；")]),s._v(" "),a("p",[s._v("（2）事件监听模式：采用事件驱动的思想，当某一事件发生时触发执行异步函数，其缺点在于整个代码\n全部得变为事件驱动模式，难以分辨主流程；")]),s._v(" "),a("p",[s._v("（3）发布订阅模式：当异步任务执行完成时发布消息给信号中心，其他任务通过在信号中心中订阅消息\n来确定自己是否开始执行；")]),s._v(" "),a("p",[s._v("（4）Promise(ES6)：Promise对象共有三种状态pending(初始化状态)、fulfilled(成功状态)、\nrejected(失败状态)。")]),s._v(" "),a("p",[s._v("（5）async/await(ES7)：基于Promise实现的异步函数；")]),s._v(" "),a("p",[s._v("（6）利用生成器实现。")]),s._v(" "),a("h2",{attrs:{id:"怎么理解promise对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么理解promise对象"}},[s._v("#")]),s._v(" 怎么理解Promise对象？")]),s._v(" "),a("div",{attrs:{id:"19"}}),s._v(" "),a("p",[s._v("Promise对象有如下两个特点：")]),s._v(" "),a("ol",[a("li",[s._v("对象的状态不受外界影响。Promise对象共有三种状态pending、fulfilled、rejected。状态值只会被异步结果决定，其他任何操作无法改变。")]),s._v(" "),a("li",[s._v("状态一旦成型，就不会再变，且任何时候都可得到这个结果。状态值会由pending变为fulfilled或rejected，这时即为resolved。"),a("br"),s._v("\nPromise的缺点有如下三个缺点：")]),s._v(" "),a("li",[s._v("Promise一旦执行便无法被取消；")]),s._v(" "),a("li",[s._v("不可设置回调函数，其内部发生的错误无法捕获；")]),s._v(" "),a("li",[s._v("当处于pending状态时，无法得知其具体发展到了哪个阶段。"),a("br"),s._v("\nPomise中常用的方法有：")]),s._v(" "),a("li",[a("code",[s._v("Promise.prototype.then()")]),s._v("：Promise实例的状态发生改变时，会调用then内部的回调函数。\nthen方法接受两个参数（第一个为resolved状态时时执行的回调，第一个为rejected状态时时执行的回调）")]),s._v(" "),a("li",[a("code",[s._v("Promise.prototype.catch()")]),s._v("："),a("code",[s._v(".then(null, rejection)")]),s._v("或"),a("code",[s._v(".then(undefined, rejection)")]),s._v("的别名，用\n于指定发生错误时的回调函数。")])]),s._v(" "),a("h2",{attrs:{id:"怎么理解宏任务-微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么理解宏任务-微任务"}},[s._v("#")]),s._v(" 怎么理解宏任务？微任务？")]),s._v(" "),a("div",{attrs:{id:"20"}}),s._v(" "),a("p",[s._v("宏任务有：script(整体代码)、setTimeout、setInterval、I/O、页面渲染；\n微任务有：Promise.then、Object.observe、MutationObserver。")]),s._v(" "),a("p",[s._v("执行顺序大致如下："),a("br"),s._v("\n主线程任务——>宏任务——>微任务——>微任务里的宏任务——>.......——>直到任务全部完成")]),s._v(" "),a("h2",{attrs:{id:"实现继承的方法有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现继承的方法有哪些"}},[s._v("#")]),s._v(" 实现继承的方法有哪些？")]),s._v(" "),a("div",{attrs:{id:"21"}}),s._v(" "),a("p",[s._v("实现继承的方法有：")]),s._v(" "),a("ol",[a("li",[s._v("class+extends继承（ES6）")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//类模板")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//继承类")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//重点。extends方法，内部用constructor+super")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//super作为函数调用时，代表父类的构造函数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//constructor可省略")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"eating"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("原型继承")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//类模板")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//添加原型方法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("eat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"eating"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("furColor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("color "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" color "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//继承类")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//重点：子实例的原型等于父类的实例")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("借用构造函数继承")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"CatName"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//重点，调用父类的call方法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("寄生组合式继承（重点）")])]),s._v(" "),a("h2",{attrs:{id:"require-import之间的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#require-import之间的区别"}},[s._v("#")]),s._v(" require/import之间的区别？")]),s._v(" "),a("div",{attrs:{id:"22"}}),s._v(" "),a("ol",[a("li",[s._v("require是CommonJS语法，import是ES6语法；")]),s._v(" "),a("li",[s._v("require只在后端服务器支持，import在高版本浏览器及Node中都可以支持；")]),s._v(" "),a("li",[s._v("require引入的是原始导出值的复制，import则是导出值的引用；")]),s._v(" "),a("li",[s._v("require时运行时动态加载，import是静态编译；")]),s._v(" "),a("li",[s._v("require调用时默认不是严格模式，import则默认调用严格模式")])]),s._v(" "),a("h2",{attrs:{id:"原型和原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型和原型链"}},[s._v("#")]),s._v(" 原型和原型链")]),s._v(" "),a("div",{attrs:{id:"23"}}),s._v(" "),a("p",[s._v("1、原型的概念\nJavaScript的象中都包含了一个 [proto] 内部属性，这个属性所对应的就是自身的原型")]),s._v(" "),a("p",[s._v("2、原型链的概念\n当一个对象调用自身不存在的属性/方法时，就会去自己 [proto] 关联的前辈 prototype 对象上去找，如\n果没找到，就会去该 prototype 原型 [proto] 关联的前辈 prototype 去找。依次类推，直到找到属性/方\n法或 undefined 为止。从而形成了所谓的“原型链”。")]),s._v(" "),a("h2",{attrs:{id:"什么是事件委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件委托"}},[s._v("#")]),s._v(" 什么是事件委托？")]),s._v(" "),a("div",{attrs:{id:"24"}}),s._v(" "),a("blockquote",[a("p",[s._v("事件委托，又名事件代理。事件委托就是利用事件冒泡，就是把子元素的事件都绑定到父元素上。如果子元素阻止了事件冒泡，那么委托也就没法实现了。")])]),s._v(" "),a("h2",{attrs:{id:"解释一下变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释一下变量提升"}},[s._v("#")]),s._v(" 解释一下变量提升")]),s._v(" "),a("div",{attrs:{id:"25"}}),s._v(" "),a("blockquote",[a("p",[s._v("变量的提升是JavaScript的默认行为，这意味着将所有变量声明移动到当前作用域的顶部，并且可以在声明之前使用变量。初始化不会被提升，提升仅作用于变量的声明。")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'——'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1——undefined")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"如何理解高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解高阶函数"}},[s._v("#")]),s._v(" 如何理解高阶函数？")]),s._v(" "),a("div",{attrs:{id:"26"}}),s._v(" "),a("p",[s._v("JavaScript中的一切都是对象，包括函数。我们可以将变量作为参数传递给函数，函数也是如此。我们调用接受和或返回另一个函数称为高阶函数的函数。")]),s._v(" "),a("h2",{attrs:{id:"如何区分声明函数和表达式函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何区分声明函数和表达式函数"}},[s._v("#")]),s._v(" 如何区分声明函数和表达式函数")]),s._v(" "),a("div",{attrs:{id:"27"}}),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 声明函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HELLO"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表达式函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("h1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HELLO"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("两个函数将在不同的时期定义。在解析期间定义声明，在运行时定义表达式;因此，如果我们控制台打印h1 ，它将显示 HELLO 。")]),s._v(" "),a("h2",{attrs:{id:"解释原型继承是如何工作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释原型继承是如何工作的"}},[s._v("#")]),s._v(" 解释原型继承是如何工作的")]),s._v(" "),a("div",{attrs:{id:"28"}}),s._v(" "),a("p",[s._v("JavaScript不是一种面向对象的友好编程语言，但它仍然使用继承的思想来实现依赖关系，并使用许多内置函数使其灵活使用。了解原型继承的工作原理将使你很好地理解JavaScript知识，从而避免概念上的误用。")])])}),[],!1,null,null,null);t.default=r.exports}}]);