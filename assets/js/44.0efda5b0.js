(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{585:function(v,t,a){"use strict";a.r(t);var e=a(12),s=Object(e.a)({},(function(){var v=this,t=v.$createElement,a=v._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"vuejs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuejs"}},[v._v("#")]),v._v(" Vuejs")]),v._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1"}},[v._v("Vue的优点")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#2"}},[v._v("Vue父组件如何向子组件传递数据")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#3"}},[v._v("Vue子组件如何向父组件传递数据")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#4"}},[v._v("v-show和v-if指令的共同点和不同点")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#5"}},[v._v("如何让CSS只在当前组件中起作用")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#6"}},[v._v("keep-alive的作用是什么")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#7"}},[v._v("说出几种Vue当中的指令和它的用法")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#8"}},[v._v("vue-loader是什么？使用它的用途有哪些？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#9"}},[v._v("为什么使用key")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#10"}},[v._v("axios安装")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#11"}},[v._v("v-modal的使用")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#12"}},[v._v("请说出vue.cli项目中的src目录每个文件夹和文件的用法")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#13"}},[v._v("分别简述computed和watch的使用场景")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#14"}},[v._v("v-on可以监听多个方法吗？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#15"}},[v._v("$nextTick的使用")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#16"}},[v._v("vue组件中data为什么必须是一个函数？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#17"}},[v._v("渐进式框架的理解")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#18"}},[v._v("Vue中双向数据绑定是如何实现的")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#19"}},[v._v("单页面应用和多页面应用区别及其优缺点")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#20"}},[v._v("v-if和v-for的优先级")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#21"}},[v._v("assets和static的区别")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#22"}},[v._v("Vue常用的修饰符")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#23"}},[v._v("Vue的两个核心点")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#24"}},[v._v("Vue和jQuery的区别")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#25"}},[v._v("引进组件的步骤")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#26"}},[v._v("delete和Vue.delete删除数组的区别")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#27"}},[v._v("SPA首屏加载慢如何解决")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#28"}},[v._v("Vue-router跳转和location.href有什么区别")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#29"}},[v._v("Vue的slot")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#30"}},[v._v("你们的Vue项目是打包了一个js文件，一个css文件。还是有多个文件？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#31"}},[v._v("Vue里面router-link在电脑上有用，在安卓上没反应怎么解决？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#32"}},[v._v("Vue2中注册在router-link上事件无效解决方法")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#33"}},[v._v("router-link在IE和Firefox中不起作用(路由不跳转)的问题")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#34"}},[v._v("axios的特点有哪些？")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#35"}},[v._v("请说下封装Vue组件的过程")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#36"}},[v._v("params和query的区别")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#37"}},[v._v("Vue初始化页面闪动问题")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#38"}},[v._v("Vue更新数组时触发视图更新的方法")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#39"}},[v._v("Vue常用的UI组件库")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#40"}},[v._v("Vue的生命周期")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#41"}},[v._v("虚拟DOM和DIFF算法")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#42"}},[v._v("Vue2和Vue3原理")])]),v._v(" "),a("li",[a("a",{attrs:{href:"#43"}},[v._v("开发中常用的指令有哪些？")])])]),v._v(" "),a("h2",{attrs:{id:"vue的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue的优点"}},[v._v("#")]),v._v(" Vue的优点")]),v._v(" "),a("div",{attrs:{id:"1"}}),v._v(" "),a("ul",[a("li",[v._v("轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十 kb；")]),v._v(" "),a("li",[v._v("简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；")]),v._v(" "),a("li",[v._v("双向数据绑定：保留了 angular 的特点，在数据操作方面更为简单；")]),v._v(" "),a("li",[v._v("组件化：保留了 react 的优点，实现了 html 的封装和重用，在构建单页面应用方面有着独特的优势；")]),v._v(" "),a("li",[v._v("视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；")]),v._v(" "),a("li",[v._v("虚拟 DOM：dom 操作是非常耗费性能的， 不再使用原生的 dom 操作节点，极大解放 dom 操作，但具体操作的还是dom 不过是换了另一种方式；")]),v._v(" "),a("li",[v._v("运行速度更快: 相比较与 react 而言，同样是操作虚拟 dom，就性能而言，vue 存在很大的优势。")])]),v._v(" "),a("h2",{attrs:{id:"vue父组件如何向子组件传递数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue父组件如何向子组件传递数据"}},[v._v("#")]),v._v(" Vue父组件如何向子组件传递数据")]),v._v(" "),a("div",{attrs:{id:"2"}}),v._v(" "),a("p",[v._v("通过 props")]),v._v(" "),a("h2",{attrs:{id:"vue子组件如何向父组件传递数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue子组件如何向父组件传递数据"}},[v._v("#")]),v._v(" Vue子组件如何向父组件传递数据")]),v._v(" "),a("div",{attrs:{id:"3"}}),v._v(" "),a("p",[v._v("$emit 方法")]),v._v(" "),a("h2",{attrs:{id:"v-show和v-if指令的共同点和不同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-show和v-if指令的共同点和不同点"}},[v._v("#")]),v._v(" v-show和v-if指令的共同点和不同点")]),v._v(" "),a("div",{attrs:{id:"4"}}),v._v(" "),a("p",[v._v("共同点：都能控制元素的显示和隐藏；")]),v._v(" "),a("p",[v._v("不同点：实现本质方法不同，v-show 本质就是通过控制 css 中的 display 设置为 none，控制隐藏，只会编译一次；v-if 是动态的向 DOM 树内添加或者删除 DOM 元素，若初始值为 false，就不会编译了。而且 v-if 不停的销毁和创建比较消耗性能。")]),v._v(" "),a("p",[v._v("总结：如果要频繁切换某节点，使用 v-show(切换开销比较小，初始开销较大)。如果不需要频繁切换某\n节点使用 v-if（初始渲染开销较小，切换开销比较大）。")]),v._v(" "),a("h2",{attrs:{id:"如何让css只在当前组件中起作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何让css只在当前组件中起作用"}},[v._v("#")]),v._v(" 如何让CSS只在当前组件中起作用")]),v._v(" "),a("div",{attrs:{id:"5"}}),v._v(" "),a("p",[v._v("在组件中的 style 前面加上 scoped")]),v._v(" "),a("h2",{attrs:{id:"keep-alive的作用是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive的作用是什么"}},[v._v("#")]),v._v(" keep-alive的作用是什么")]),v._v(" "),a("div",{attrs:{id:"6"}}),v._v(" "),a("p",[v._v("keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。")]),v._v(" "),a("h2",{attrs:{id:"说出几种vue当中的指令和它的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说出几种vue当中的指令和它的用法"}},[v._v("#")]),v._v(" 说出几种Vue当中的指令和它的用法")]),v._v(" "),a("div",{attrs:{id:"7"}}),v._v(" "),a("ul",[a("li",[v._v("v-model 双向数据绑定；")]),v._v(" "),a("li",[v._v("v-for 循环；")]),v._v(" "),a("li",[v._v("v-if v-show 显示与隐藏；")]),v._v(" "),a("li",[v._v("v-on 事件；v-once: 只绑定一次。")])]),v._v(" "),a("h2",{attrs:{id:"vue-loader是什么-使用它的用途有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-loader是什么-使用它的用途有哪些"}},[v._v("#")]),v._v(" vue-loader是什么？使用它的用途有哪些？")]),v._v(" "),a("div",{attrs:{id:"8"}}),v._v(" "),a("p",[v._v("vue 文件的一个加载器，将 template/js/style 转换成 js 模块。")]),v._v(" "),a("p",[v._v("用途：js 可以写 es6、style 样式可以 scss 或 less、template 可以加 jade 等")]),v._v(" "),a("h2",{attrs:{id:"为什么使用key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用key"}},[v._v("#")]),v._v(" 为什么使用key")]),v._v(" "),a("div",{attrs:{id:"9"}}),v._v(" "),a("p",[v._v("需要使用 key 来给每个节点做一个唯一标识，Diff 算法就可以正确的识别此节点。\n作用主要是为了高效的更新虚拟 DOM。")]),v._v(" "),a("h2",{attrs:{id:"axios安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#axios安装"}},[v._v("#")]),v._v(" axios安装")]),v._v(" "),a("div",{attrs:{id:"10"}}),v._v(" "),a("p",[v._v("请求后台资源的模块。"),a("code",[v._v("npm install axios --save")]),v._v(" 装好"),a("br"),v._v("\njs 中使用 import 进来，然后. get 或. post。返回在. then 函数中如果成功，失败则是在. catch函数中。")]),v._v(" "),a("h2",{attrs:{id:"v-modal的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-modal的使用"}},[v._v("#")]),v._v(" v-modal的使用")]),v._v(" "),a("div",{attrs:{id:"11"}}),v._v(" "),a("ul",[a("li",[v._v("v-model 用于表单数据的双向绑定，其实它就是一个语法糖，这个背后就做了两个操作：")]),v._v(" "),a("li",[v._v("v-bind 绑定一个 value 属性；")]),v._v(" "),a("li",[v._v("v-on 指令给当前元素绑定 input 事件。")])]),v._v(" "),a("h2",{attrs:{id:"请说出vue-cli项目中的src目录每个文件夹和文件的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请说出vue-cli项目中的src目录每个文件夹和文件的用法"}},[v._v("#")]),v._v(" 请说出vue.cli项目中的src目录每个文件夹和文件的用法")]),v._v(" "),a("div",{attrs:{id:"12"}}),v._v(" "),a("p",[v._v("assets 文件夹是放静态资源；components 是放组件；router 是定义路由相关的配置; app.vue 是一个应用主组件；main.js 是入口文件。")]),v._v(" "),a("h2",{attrs:{id:"分别简述computed和watch的使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分别简述computed和watch的使用场景"}},[v._v("#")]),v._v(" 分别简述computed和watch的使用场景")]),v._v(" "),a("div",{attrs:{id:"13"}}),v._v(" "),a("ul",[a("li",[v._v("computed:当一个属性受多个属性影响的时候就需要用到 computed最典型的栗子： 购物车商品结算的时候")]),v._v(" "),a("li",[v._v("watch:当一条数据影响多条数据的时候就需要用 watch")])]),v._v(" "),a("h2",{attrs:{id:"v-on可以监听多个方法吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-on可以监听多个方法吗"}},[v._v("#")]),v._v(" v-on可以监听多个方法吗？")]),v._v(" "),a("div",{attrs:{id:"14"}}),v._v(" "),a("p",[v._v("可以")]),v._v(" "),a("h2",{attrs:{id:"nexttick的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nexttick的使用"}},[v._v("#")]),v._v(" $nextTick的使用")]),v._v(" "),a("div",{attrs:{id:"15"}}),v._v(" "),a("p",[v._v("当你修改了 data 的值然后马上获取这个 dom 元素的值，是不能获取到更新后的值，你需要使用 $nextTick 这个回调，让修改后的 data 值渲染更新到 dom 元素之后在获取，才能成功。")]),v._v(" "),a("h2",{attrs:{id:"vue组件中data为什么必须是一个函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue组件中data为什么必须是一个函数"}},[v._v("#")]),v._v(" vue组件中data为什么必须是一个函数？")]),v._v(" "),a("div",{attrs:{id:"16"}}),v._v(" "),a("p",[v._v("因为 JavaScript 的特性所导致，在 component 中，data 必须以函数的形式存在，不可以是对象。组建中的 data 写成一个函数，数据以函数返回值的形式定义，这样每次复用组件的时候，都会返回一份新的 data，相当于每个组件实例都有自己私有的数据空间，它们只负责各自维护的数据，不会造成混乱。而单纯的写成对象形式，就是所有的组件实例共用了一个 data，这样改一个全都改了。")]),v._v(" "),a("h2",{attrs:{id:"渐进式框架的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渐进式框架的理解"}},[v._v("#")]),v._v(" 渐进式框架的理解")]),v._v(" "),a("div",{attrs:{id:"17"}}),v._v(" "),a("p",[v._v("主张最少；可以根据不同的需求选择不同的层级")]),v._v(" "),a("h2",{attrs:{id:"vue中双向数据绑定是如何实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue中双向数据绑定是如何实现的"}},[v._v("#")]),v._v(" Vue中双向数据绑定是如何实现的")]),v._v(" "),a("div",{attrs:{id:"18"}}),v._v(" "),a("p",[v._v("vue 双向数据绑定是通过 数据劫持 结合 发布订阅模式的方式来实现的， 也就是说数据和视图同步，数据发生变化，视图跟着变化，视图变化，数据也随之发生改变；")]),v._v(" "),a("p",[v._v("核心：关于 VUE 双向数据绑定，其核心是 Object.defineProperty() 方法。")]),v._v(" "),a("h2",{attrs:{id:"单页面应用和多页面应用区别及其优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单页面应用和多页面应用区别及其优缺点"}},[v._v("#")]),v._v(" 单页面应用和多页面应用区别及其优缺点")]),v._v(" "),a("div",{attrs:{id:"19"}}),v._v(" "),a("p",[v._v("单页面应用（SPA），通俗一点说就是指只有一个主页面的应用，浏览器一开始要加载所有必须的html, js, css。所有的页面内容都包含在这个所谓的主页面中。但在写的时候，还是会分开写（页面片段），然后在交互的时候由路由程序动态载入，单页面的页面跳转，仅刷新局部资源。多应用于 pc 端。")]),v._v(" "),a("p",[v._v("多页面（MPA），就是指一个应用中有多个页面，页面跳转时是整页刷新")]),v._v(" "),a("p",[v._v("单页面的优点：\n用户体验好，快，内容的改变不需要重新加载整个页面，基于这一点 spa 对服务器压力较小；前后端分\n离；页面效果会比较炫酷（比如切换页面内容时的专场动画）。")]),v._v(" "),a("p",[v._v("单页面缺点：\n不利于 seo；导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的\n前进后退功能，所以需要自己建立堆栈管理）；初次加载时耗时多；页面复杂度提高很多。")]),v._v(" "),a("h2",{attrs:{id:"v-if和v-for的优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-if和v-for的优先级"}},[v._v("#")]),v._v(" v-if和v-for的优先级")]),v._v(" "),a("div",{attrs:{id:"20"}}),v._v(" "),a("p",[v._v("当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级，这意味着 v-if 将分别重复运行于每个v-for 循环中。")]),v._v(" "),a("p",[v._v("所以，不推荐 v-if 和 v-for 同时使用。")]),v._v(" "),a("p",[v._v("如果 v-if 和 v-for 一起用的话，vue 中的的会自动提示 v-if 应该放到外层去。")]),v._v(" "),a("h2",{attrs:{id:"assets和static的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assets和static的区别"}},[v._v("#")]),v._v(" assets和static的区别")]),v._v(" "),a("div",{attrs:{id:"21"}}),v._v(" "),a("p",[v._v("相同点：assets 和 static 两个都是存放静态资源文件。项目中所需要的资源文件图片，字体图标，样式文件等都可以放在这两个文件下，这是相同点")]),v._v(" "),a("p",[v._v("不相同点：assets 中存放的静态资源文件在项目打包时，也就是运行 npm run build 时会将 assets 中放置的静态资源文件进行打包上传，所谓打包简单点可以理解为压缩体积，代码格式化。而压缩后的静态资源文件最终也都会放置在 static 文件中跟着 index.html 一同上传至服务器。static 中放置的静态资源文件就不会要走打包压缩格式化等流程，而是直接进入打包好的目录，直接上传至服务器。因为避免了压缩直接进行上传，在打包时会提高一定的效率，但是 static 中的资源文件由于没有进行压缩等操作，所以文件的体积也就相对于 assets 中打包后的文件提交较大点。在服务器中就会占据更大的空间。")]),v._v(" "),a("p",[v._v("建议：将项目中 template 需要的样式文件 js 文件等都可以放置在 assets 中，走打包这一流程。减少体积。而项目中引入的第三方的资源文件如 iconfoont.css 等文件可以放置在 static 中，因为这些引入的第三方文件已经经过处理，我们不再需要处理，直接上传。")]),v._v(" "),a("h2",{attrs:{id:"vue常用的修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue常用的修饰符"}},[v._v("#")]),v._v(" Vue常用的修饰符")]),v._v(" "),a("div",{attrs:{id:"22"}}),v._v(" "),a("ul",[a("li",[v._v(".stop：等同于 JavaScript 中的 event.stopPropagation()，防止事件冒泡；")]),v._v(" "),a("li",[v._v(".prevent：等同于 JavaScript 中的 event.preventDefault()，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；")]),v._v(" "),a("li",[v._v(".capture：与事件冒泡的方向相反，事件捕获由外到内；")]),v._v(" "),a("li",[v._v(".self：只会触发自己范围内的事件，不包含子元素；")]),v._v(" "),a("li",[v._v(".once：只会触发一次。")])]),v._v(" "),a("h2",{attrs:{id:"vue的两个核心点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue的两个核心点"}},[v._v("#")]),v._v(" Vue的两个核心点")]),v._v(" "),a("div",{attrs:{id:"23"}}),v._v(" "),a("p",[v._v("数据驱动、组件系统")]),v._v(" "),a("ul",[a("li",[v._v("数据驱动：ViewModel，保证数据和视图的一致性。")]),v._v(" "),a("li",[v._v("组件系统：应用类 UI 可以看作全部是由组件树构成的。")])]),v._v(" "),a("h2",{attrs:{id:"vue和jquery的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue和jquery的区别"}},[v._v("#")]),v._v(" Vue和jQuery的区别")]),v._v(" "),a("div",{attrs:{id:"24"}}),v._v(" "),a("p",[v._v('jQuery 是使用选择器（$）选取 DOM 对象，对其进行赋值、取值、事件绑定等操作，其实和原生的 HTML 的区别只在于可以更方便的选取和操作 DOM 对象，而数据和界面是在一起的。比如需要获取label 标签的内容：$("lable").val();, 它还是依赖 DOM 元素的值。')]),v._v(" "),a("p",[v._v("Vue 则是通过 Vue 对象将数据和 View 完全分离开来了。对数据进行操作不再需要引用相应的 DOM 对象，可以说数据和 View 是分离的，他们通过 Vue 对象这个 vm 实现相互的绑定。这就是传说中的MVVM。")]),v._v(" "),a("h2",{attrs:{id:"引进组件的步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引进组件的步骤"}},[v._v("#")]),v._v(" 引进组件的步骤")]),v._v(" "),a("div",{attrs:{id:"25"}}),v._v(" "),a("ul",[a("li",[v._v("在 template 中引入组件；")]),v._v(" "),a("li",[v._v("在 script 的第一行用 import 引入路径；")]),v._v(" "),a("li",[v._v("用 component 中写上组件名称。")])]),v._v(" "),a("h2",{attrs:{id:"delete和vue-delete删除数组的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete和vue-delete删除数组的区别"}},[v._v("#")]),v._v(" delete和Vue.delete删除数组的区别")]),v._v(" "),a("div",{attrs:{id:"26"}}),v._v(" "),a("p",[v._v("delete 只是被删除的元素变成了 empty/undefined 其他的元素的键值还是不变。Vue.delete 直接删除了数组 改变了数组的键值。")]),v._v(" "),a("h2",{attrs:{id:"spa首屏加载慢如何解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spa首屏加载慢如何解决"}},[v._v("#")]),v._v(" SPA首屏加载慢如何解决")]),v._v(" "),a("div",{attrs:{id:"27"}}),v._v(" "),a("p",[v._v("安装动态懒加载所需插件；使用 CDN 资源")]),v._v(" "),a("h2",{attrs:{id:"vue-router跳转和location-href有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-router跳转和location-href有什么区别"}},[v._v("#")]),v._v(" Vue-router跳转和location.href有什么区别")]),v._v(" "),a("div",{attrs:{id:"28"}}),v._v(" "),a("ul",[a("li",[v._v("使用 location.href='/url'来跳转，简单方便，但是刷新了页面；")]),v._v(" "),a("li",[v._v("使用 history.pushState('/url')，无刷新页面，静态跳转；")])]),v._v(" "),a("p",[v._v("引进 router，然后使用 router.push('/url') 来跳转，使用了 diff 算法，实现了按需加载，减少了 dom的消耗。其实使用 router 跳转和使用 history.pushState() 没什么差别的，因为 vue-router 就是用了history.pushState()，尤其是在 history 模式下。")]),v._v(" "),a("h2",{attrs:{id:"vue-slot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-slot"}},[v._v("#")]),v._v(" Vue slot")]),v._v(" "),a("div",{attrs:{id:"29"}}),v._v(" "),a("p",[v._v("简单来说，假如父组件需要在子组件内放一些 DOM，那么这些 DOM 是显示、不显示、在哪个地方显示、如何显示，就是 slot 分发负责的活。")]),v._v(" "),a("h2",{attrs:{id:"你们的vue项目是打包了一个js文件-一个css文件。-还是有多个文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你们的vue项目是打包了一个js文件-一个css文件。-还是有多个文件"}},[v._v("#")]),v._v(" 你们的Vue项目是打包了一个js文件，一个css文件。 还是有多个文件？")]),v._v(" "),a("div",{attrs:{id:"30"}}),v._v(" "),a("p",[v._v("根据 vue-cli 脚手架规范，一个 js 文件，一个 CSS 文件。")]),v._v(" "),a("h2",{attrs:{id:"vue里面router-link在电脑上有用-在安卓上没反应怎么解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue里面router-link在电脑上有用-在安卓上没反应怎么解决"}},[v._v("#")]),v._v(" Vue里面router-link在电脑上有用，在安卓上没反应怎么解决？")]),v._v(" "),a("div",{attrs:{id:"31"}}),v._v(" "),a("p",[v._v("Vue 路由在 Android 机上有问题，babel 问题，安装 babel polypill 插件解决。")]),v._v(" "),a("h2",{attrs:{id:"vue2中注册在router-link上事件无效解决方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue2中注册在router-link上事件无效解决方法"}},[v._v("#")]),v._v(" Vue2中注册在router-link上事件无效解决方法")]),v._v(" "),a("div",{attrs:{id:"32"}}),v._v(" "),a("p",[v._v("使用 @click.native。原因：router-link 会阻止 click 事件，.native 指直接监听一个原生事件。")]),v._v(" "),a("h2",{attrs:{id:"router-link在ie和firefox中不起作用-路由不跳转-的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router-link在ie和firefox中不起作用-路由不跳转-的问题"}},[v._v("#")]),v._v(" router-link在IE和Firefox中不起作用(路由不跳转)的问题")]),v._v(" "),a("div",{attrs:{id:"33"}}),v._v(" "),a("p",[v._v("方法一：只用 a 标签，不适用 button 标签；")]),v._v(" "),a("p",[v._v("方法二：使用 button 标签和 Router.navigate 方法")]),v._v(" "),a("h2",{attrs:{id:"axios的特点有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#axios的特点有哪些"}},[v._v("#")]),v._v(" axios的特点有哪些？")]),v._v(" "),a("div",{attrs:{id:"34"}}),v._v(" "),a("ul",[a("li",[v._v("从浏览器中创建 XMLHttpRequests；")]),v._v(" "),a("li",[v._v("node.js 创建 http 请求；")]),v._v(" "),a("li",[v._v("支持 Promise API；")]),v._v(" "),a("li",[v._v("拦截请求和响应；")]),v._v(" "),a("li",[v._v("转换请求数据和响应数据；")]),v._v(" "),a("li",[v._v("取消请求；")]),v._v(" "),a("li",[v._v("自动换成 json。")]),v._v(" "),a("li",[v._v("axios 中的发送字段的参数是 data 跟 params 两个，两者的区别在于 params 是跟请求地址一起发送的，data 的作为一个请求体进行发送")]),v._v(" "),a("li",[v._v("params 一般适用于 get 请求，data 一般适用于 post put 请求。")])]),v._v(" "),a("h2",{attrs:{id:"请说下封装vue组件的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请说下封装vue组件的过程"}},[v._v("#")]),v._v(" 请说下封装Vue组件的过程")]),v._v(" "),a("div",{attrs:{id:"35"}}),v._v(" "),a("ol",[a("li",[v._v("建立组件的模板，先把架子搭起来，写写样式，考虑好组件的基本逻辑。")]),v._v(" "),a("li",[v._v("准备好组件的数据输入。即分析好逻辑，定好 props 里面的数据、类型。")]),v._v(" "),a("li",[v._v("准备好组件的数据输出。即根据组件逻辑，做好要暴露出来的方法。")]),v._v(" "),a("li",[v._v("封装完毕了，直接调用即可")])]),v._v(" "),a("h2",{attrs:{id:"params和query的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#params和query的区别"}},[v._v("#")]),v._v(" params和query的区别")]),v._v(" "),a("div",{attrs:{id:"36"}}),v._v(" "),a("p",[v._v("用法：query 要用 path 来引入，params 要用 name 来引入，接收参数都是类似的，分别是"),a("code",[v._v("this.$route.query.name")]),v._v(" 和 "),a("code",[v._v("this.$route.params.name")]),v._v("。")]),v._v(" "),a("p",[v._v("url 地址显示：query 更加类似于我们 ajax 中 get 传参，params 则类似于 post，说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示")]),v._v(" "),a("p",[v._v("注意点：")]),v._v(" "),a("ul",[a("li",[v._v("query 刷新不会丢失 query 里面的数据")]),v._v(" "),a("li",[v._v("params 刷新 会 丢失 params 里面的数据。")])]),v._v(" "),a("h2",{attrs:{id:"vue初始化页面闪动问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue初始化页面闪动问题"}},[v._v("#")]),v._v(" Vue初始化页面闪动问题")]),v._v(" "),a("div",{attrs:{id:"37"}}),v._v(" "),a("p",[v._v("使用 vue 开发时，在 vue 初始化之前，由于 div 是不归 vue 管的，所以我们写的代码在还没有解析\n的情况下会容易出现花屏现象，看到类似于 "+v._s(v.message)+" 的字样，虽然一般情况下这个时间很短暂，但\n是我们还是有必要让解决这个问题的。\n首先：在 css 里加上")]),v._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[v._v("[v-cloak]")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[v._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" none"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])]),v._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[v._v("1")]),a("br"),a("span",{staticClass:"line-number"},[v._v("2")]),a("br"),a("span",{staticClass:"line-number"},[v._v("3")]),a("br")])]),a("p",[v._v("如果没有彻底解决问题，则在根元素加上 "),a("code",[v._v('style="display: none;')])]),v._v(" "),a("h2",{attrs:{id:"vue更新数组时触发视图更新的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue更新数组时触发视图更新的方法"}},[v._v("#")]),v._v(" Vue更新数组时触发视图更新的方法")]),v._v(" "),a("div",{attrs:{id:"38"}}),v._v(" "),a("ul",[a("li",[v._v("push();")]),v._v(" "),a("li",[v._v("pop();")]),v._v(" "),a("li",[v._v("shift();")]),v._v(" "),a("li",[v._v("unshift();")]),v._v(" "),a("li",[v._v("splice();")]),v._v(" "),a("li",[v._v("sort();")]),v._v(" "),a("li",[v._v("reverse();")])]),v._v(" "),a("h2",{attrs:{id:"vue常用的ui组件库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue常用的ui组件库"}},[v._v("#")]),v._v(" Vue常用的UI组件库")]),v._v(" "),a("div",{attrs:{id:"39"}}),v._v(" "),a("ul",[a("li",[v._v("Mint UI")]),v._v(" "),a("li",[v._v("element")]),v._v(" "),a("li",[v._v("VUX")])]),v._v(" "),a("h2",{attrs:{id:"vue的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue的生命周期"}},[v._v("#")]),v._v(" Vue的生命周期")]),v._v(" "),a("div",{attrs:{id:"40"}}),v._v(" "),a("ul",[a("li",[v._v("beforeCreate")]),v._v(" "),a("li",[v._v("created")]),v._v(" "),a("li",[v._v("beforeMount")]),v._v(" "),a("li",[v._v("mounted")]),v._v(" "),a("li",[v._v("beforeUpdate")]),v._v(" "),a("li",[v._v("updated")]),v._v(" "),a("li",[v._v("beforeDestroy")]),v._v(" "),a("li",[v._v("destroyed")])]),v._v(" "),a("p",[v._v("（创建、挂载、更新、卸载）\n挂载中可以操作DOM，创建中不能操作DOM；常用挂载或者创建生命周期就行了")]),v._v(" "),a("h2",{attrs:{id:"虚拟dom和diff算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom和diff算法"}},[v._v("#")]),v._v(" 虚拟DOM和DIFF算法")]),v._v(" "),a("div",{attrs:{id:"41"}}),v._v(" "),a("p",[v._v("将DOM抽象为虚拟DOM, 然后通过新旧虚拟DOM 这两个对象的差异(Diff算法),最终只把变化的部分重新渲染,提高渲染效率的过程;")]),v._v(" "),a("p",[v._v("diff 是通过JS层面的计算，返回一个patch对象，即补丁对象，在通过特定的操作解析patch对象，完成页面的重新渲染")]),v._v(" "),a("h2",{attrs:{id:"vue2和vue3原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue2和vue3原理"}},[v._v("#")]),v._v(" Vue2和Vue3原理")]),v._v(" "),a("div",{attrs:{id:"42"}}),v._v(" "),a("ol",[a("li",[v._v("vue2和vue3双向数据绑定原理发生了改变\nvue2 的双向数据绑定是利用ES5 的一个 API Object.definePropert()对数据进行劫持 结合 发布订阅模式\n的方式来实现的。\nvue3 中使用了 es6 的 ProxyAPI 对数据代理。\n相比于vue2.x，使用proxy的优势如下\ndefineProperty只能监听某个属性，不能对全对象监听\n可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）\n可以监听数组，不用再去单独的对数组做特异性操作 vue3.x可以检测到数组内部数据的变化")]),v._v(" "),a("li",[v._v("默认进行懒观察（lazy observation）\n在 2.x 版本里，不管数据多大，都会在一开始就为其创建观察者。当数据很大时，这可能会在页面载入\n时造成明显的性能压力。3.x 版本，只会对「被用于渲染初始可见部分的数据」创建观察者，而且 3.x 的\n观察者更高效。")]),v._v(" "),a("li",[v._v("更精准的变更通知\n比例来说：2.x 版本中，使用 Vue.set 来给对象新增一个属性时，这个对象的所有 watcher 都会重新运\n行；3.x 版本中，只有依赖那个属性的 watcher 才会重新运行。")]),v._v(" "),a("li",[v._v("vue3新加入了TypeScript以及PWA的支持")]),v._v(" "),a("li",[v._v("vue2和vue3组件发送改变")])]),v._v(" "),a("h2",{attrs:{id:"开发中常用的指令有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发中常用的指令有哪些"}},[v._v("#")]),v._v(" 开发中常用的指令有哪些？")]),v._v(" "),a("div",{attrs:{id:"43"}}),v._v(" "),a("ul",[a("li",[v._v("v-model:一般用在表达输入，很轻松的实现表单控件和数据的双向绑定")]),v._v(" "),a("li",[v._v("v-html：更新元素的innerHTML")]),v._v(" "),a("li",[v._v("v-show与v-if：条件渲染，注意二者区别")]),v._v(" "),a("li",[v._v("v-on:click:可以简写为@click,@绑定一个事件。如果事件触发了，就可以指定事件的处理函数")]),v._v(" "),a("li",[v._v("v-for：基于源数据多次渲染元素或模板")]),v._v(" "),a("li",[v._v("v-bind:当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM语法")]),v._v(" "),a("li",[v._v('v-bind:title=”msg”简写：title="msg"')])])])}),[],!1,null,null,null);t.default=s.exports}}]);